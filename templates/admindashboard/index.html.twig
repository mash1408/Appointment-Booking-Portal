{% extends 'base.html.twig' %}

{% block title %}Admin Dashboard{% endblock %}

{% block body %}
<div>
	<link rel="dns-prefetch" href="//unpkg.com" />
	<link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
	<link rel="stylesheet" href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css">
	<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js" defer></script>

	<style>
		[x-cloak] {
			display: none;
		}
	</style>
	<nav class="flex items-center justify-between flex-wrap bg-gray-900 p-6">
	<a href="/">
	<p class="font-semibold rounded-md md:text-2xl md:font-serif text-transparent bg-clip-text bg-gradient-to-br from-orange-500 to-white">Sim's Salon & Spa</p>
	</a>
	<div x-data="{ showModal1: false}" :class="{'overflow-y-hidden': showModal1}">
    	<main class="flex flex-col sm:flex-row justify-end items-end">
		<button class="justify-items-end bg-transparent  text-gray-500 font-semibold hover:text-white " @click="showModal1 = true">
			Generate Slots
      </button>
	  <a href="/home" class="justify-items-center ml-8 bg-transparent text-gray-500 font-semibold hover:text-white">Reserve a Slot</a>
	  <a href="#" class="justify-items-center ml-8 bg-transparent text-gray-500 font-semibold hover:text-white">Ratings</a>
	  <a href="/logout" class="justify-items-center ml-8 bg-transparent text-red-500 font-semibold hover:text-red-800">Logout</a>
	  </main>
	  
	    <!-- Modal1 -->
		<div
		class="fixed inset-0 w-full h-full z-20 bg-black bg-opacity-50 duration-300 overflow-y-auto"
		x-show="showModal1"
		x-transition:enter="transition duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition duration-300"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		>
      	<div class="relative sm:w-3/4 md:w-1/2 lg:w-1/3 mx-2 sm:mx-auto my-10 opacity-100">
        <div
          class="relative bg-white shadow-lg rounded-md text-gray-900 z-20"
          @click.away="showModal1 = false"
          x-show="showModal1"
          x-transition:enter="transition transform duration-300"
          x-transition:enter-start="scale-0"
          x-transition:enter-end="scale-100"
          x-transition:leave="transition transform duration-300"
          x-transition:leave-start="scale-100"
          x-transition:leave-end="scale-0"
        >
          <header class="flex justify-center ">
            <h2 class="font-sans font-semibold text-3xl text-gray-900">Slot Generation</h2>
            <button class="focus:outline-none p-2 " @click="showModal1 = false">
              <svg class="fill-current flex justify-end" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
                <path
                  d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"
                ></path>
              </svg>
            </button>
          </header>
          <main class="p-2 text-center ">
			<div class="container mx-auto px-4 py-2 text-center ">
					{{ form_start(adminslot, {'attr': {'novalidate': 'novalidate'}}) }}
						<div class="container border-l-3 border-blue-600">
								{{form_label(adminslot.start_date, 'Start Date')}}
								{# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
								{{ form_widget(adminslot.start_date, {'attr': {'class': 'mb-3   border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}
							
								{{form_label(adminslot.end_date, 'End Date')}}
								{# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
								{{ form_widget(adminslot.end_date, {'attr': {'class': 'mb-3   border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}

								{# {{ form_widget(adminslot.save) }} #}

						</div>
					{{ form_end(adminslot) }}
					</div>
          </main>
          {# <footer class="flex justify-center p-2">
            {# <button
              class="bg-red-600 font-semibold text-white p-2 w-32 rounded-full hover:bg-red-700 focus:outline-none focus:ring shadow-lg hover:shadow-none transition-all duration-300"
              @click="showModal1 = false"
            >
              Cancel
            </button> #}
          {# </footer> #}
        </div>
      </div>
    </div>
	</div>
	</nav>
{% for key,review in reviews %}
{{review.comment_time}} 

{% endfor %}

{# pass slot data to javascript inorder to be able to access them  #}
{% for key,slot in slots %}
{% set entryInfo={
	id: slot.id,
	booked: slot.booked,
	dateDay: slot.slotdate|date('d'),
	dateMonth: slot.slotdate|date('m')
}%}
    <a  data-entry-info="{{ entryInfo|json_encode }}"></a>
{% endfor %}

<div class="antialiased sans-serif bg-gray-400 h-screen   ">
	<div x-data="app()" x-init="[initDate(), getNoOfDays()]" x-cloak>
		<div class="container mx-auto px-4 py-2 bg-gradient-to-r from-gray-400 via-gray-500 to-gray-400 ...">
			  
			<div class="font-bold text-xl text-gray-700 mb-4 bg-gradient-to-r from-gray-400 via-gray-500 to-gray-400 ... flex justify-center  ">
                SLOTS
			</div>

			<div class="bg-white rounded-lg overflow-hidden shadow-2xl font-semibold">

				<div class="flex items-center justify-between py-2 px-6">
						{# <div class="border rounded-lg px-1" style="padding-top: 2px;"> #}
					{# <div class="border-r inline-flex h-6"></div>		 #}
				<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 items-center" 
							:class="{'cursor-not-allowed opacity-25': month == 0 }"
							:disabled="month == 0 ? true : false"
							@click="month--; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>  
						</button>
					<div>
						<span x-text="MONTH_NAMES[month]" class=" font-mono text-semibold text-lg font-bold text-gray-800 "></span>
						<span x-text="year" class="font-mono ml-1 text-lg text-gray-600 font-normal "></span>
					</div>
			
						
					
						<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex items-center cursor-pointer hover:bg-gray-200 p-1" 
							:class="{'cursor-not-allowed opacity-25': month == 11 }"
							:disabled="month == 11 ? true : false"
							@click="month++; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
							</svg>									  
						</button>
					{# </div> #}
				</div>

				<div class="-mx-1 -mb-1">
					<div class="flex flex-wrap" style="margin-bottom: -40px;">
						<template x-for="(day, index) in DAYS" :key="index">	
							<div style="width: 14.26% " class="px-2 py-2 flex justify-center">
								<div 
									x-text="day" 
									class="absolute mt-0 z-10 text-gray-600 text-sm uppercase tracking-wide font-bold text-center "></div>
							</div>
						</template>
					</div>

					<div class="flex flex-wrap border-t border-l mt-5">
						<template x-for="blankday in blankdays">
							<div 
								style="width: 14.28%; height: 120px"
								class="text-center border-r border-b px-4 pt-2 "	
							></div>
						</template>	
						<template x-for="(date, dateIndex) in no_of_days" :key="dateIndex">	
						
							<div style="width: 14.28%; height: 120px" class=" px-4 pt-2 border-r border-b relative transition ease-in-out duration-100 delay-100"
								:class="{'bg-red-200 border-gray-500' : date.unbooked === 0 && date.booked !== 0, 'bg-green-200 border-gray-500' : date.unbooked!== 0}">

								<div
									@click="showEventModal(date.day)"
									x-text="date.day"
									
									class=" inline-flex w-6 h-6 items-center justify-center cursor-pointer text-center leading-none rounded-full transition ease-in-out duration-100"
									:class="{'bg-blue-400 text-white': isToday(date.day) == true, 'hover:bg-blue-200': isToday(date) == false }"	
								></div>

								<div style="height: 80px;" class="overflow-y-auto mt-1 " 
								x-show="!(date.booked === 0 && date.unbooked === 0)"
								 x-transition:enter="transition ease-in-out duration-300"
									
								x-transition:enter-start="opacity-0 transform scale-60"
								x-transition:enter-end="opacity-100 transform scale-100"
								x-transition:leave="transition ease-in duration-300"
								x-transition:leave-start="opacity-100 transform scale-100"
								x-transition:leave-end="opacity-0 transform scale-90"
								>
						
									<div 
										class="cursor-pointer absolute bottom-5 right-10 mt-2 mr-2 inline-flex 
										items-center justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										 x-text="date.booked"
										 
										style="border: 2px solid red;"
										
										></div>
						
										<div 
										style="border: 2px solid  #73AD21;"
										x-text="date.unbooked"
									
										class=" cursor-pointer absolute bottom-5 right-0 mt-2 mr-2 inline-flex items-center 
										justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										>
										</div>

								</div>

								<div style="height: 80px;" class="overflow-y-auto mt-1 cursor-pointer" 
								x-show="(date.booked === 0 && date.unbooked === 0)"
								 x-transition:enter="transition ease-in-out duration-300"
									
								x-transition:enter-start="opacity-0 transform scale-60"
								x-transition:enter-end="opacity-100 transform scale-100"
								x-transition:leave="transition ease-in duration-300"
								x-transition:leave-start="opacity-100 transform scale-100"
								x-transition:leave-end="opacity-0 transform scale-90"
								>
								<div 
										style="border: 2px solid  lightsteelblue;"
										
										x-transition
										class="absolute bottom-5 right-0 mt-2 mr-2 inline-flex items-center 
										justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										>
										E
										</div>

								</div>

								{# <div style="height: 80px;" class="overflow-y-auto mt-1 " id="test1">
									<div 
										class="absolute top-0 right-0 mt-2 mr-2 inline-flex items-center justify-center rounded-full text-sm w-6 h-6 bg-gray-700 text-white leading-none"
										x-show="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length"
										x-text="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length">
									</div>

								</div> #}

							</div>
						</template>
					</div>
				</div>
			</div>
		</div>
		

		<!-- Modal -->
		<div style=" background-color: rgba(0, 0, 0, 0.8)" class="fixed z-40  top-0 right-0 left-0 bottom-0 h-full w-full " x-transition:enter="transition duration-300" x-show.transition.opacity="openEventModal">
			<div class="p-4 max-w-screen-xl mx-auto relative absolute left-0 right-0 mt-24">
				<div class="shadow absolute right-0 top-0 w-10 h-10 rounded-full bg-white text-gray-500 hover:text-gray-800 inline-flex items-center justify-center cursor-pointer"
					x-on:click="openEventModal = !openEventModal">
					<svg class="fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path d="M16.192 6.344L11.949 10.586 7.707 6.344 6.293 7.758 10.535 12 6.293 16.242 7.707 17.656 11.949 13.414 16.192 17.656 17.606 16.242 13.364 12 17.606 7.758z" />
					</svg>
				</div>

					<div class="shadow w-full rounded-lg bg-white w-full block p-8">
						
						<h2 class="font-bold text-2xl mb-6 text-gray-800 border-b pb-2">Slot Details</h2>
						<p class="text-red-600 text-xs">*each slot is of 1 hour</p>
					
						<div class="mb-4">

					{# Delete Slot Function #}
					<div class="overflow-y-auto overflow-x-hidden h-80 ...">
					<div class="flex flex-col">
						<div class=" sm:-mx-6 lg:-mx-8">
							<div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
								<div class="shadow border-b border-gray-200 sm:rounded-lg">
									<table class="min-w-full divide-y divide-gray-200">
										<thead class="bg-gray-50">
											<tr>
											<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
												Slots
											</th>
											<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
												Action
											</th>
											<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
												Status
											</th>
											<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
												Customer Name
											</th>
											<th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
												Phone Number
											</th>
											</tr>
										</thead>
										
											{# {% for slot in slots %}
												<template x-if="{{slot.slotdate| date('d')}} == event_day && (month+1) == {{slot.slotdate| date('m')}}">
													 #}
														<tbody id ="slots" class="bg-white divide-y divide-gray-200">
															 {# <tr>
																<td class="px-6 py-4">
																	<div class="flex items-center">
																		<div class="ml-4">
																			<div class=" font-xs text-gray-900">
																			{{slot.slottime|date('H:i:s')}}
																			</div>
																		</div>
																	</div>
																</td>
																<td class="px-6 py-4">
																	<button type="button" class="bg-gray-800 hover:bg-gray-700 
																		text-white font-semibold py-2 px-4 border border-gray-700
																		rounded-lg shadow-sm" @click="deleteSlot({{ slot.id }})">
																		Delete
																	</button>
																</td>
																{% if slot.booked is same as("0") %}
																	<td class="px-6 py-4 ">
																		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
																			Not Booked
																		</span>
																	</td>
																{% endif %}
																{% if slot.booked is same as("1") %}
																	<td class="px-6 py-4">
																		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
																			Booked
																		</span>
																	</td>
																{% endif %}
																<td class="px-6 py-4">
																	<div class="flex items-center">
																		<div class="ml-4">
																			<div class=" font-xs text-gray-900">
																			{{customer.name}}
																			</div>
																		</div>
																	</div>
																</td>
																<td class="px-6 py-4">
																	<div class="flex items-center">
																		<div class="ml-4">
																			<div class=" font-xs text-gray-900">
																			{{customer.phone}} #}
 					</tbody>
											
									</table>		
								</div>
							</div>
						</div>
					</div>
					</div>
					
					<div class="mb-4 py-1">
						<input class="mb-3 border-b-2 text-center rounded-lg border-purple-500 font-display
						focus:border-primarycolor transition-all duration-500 text-lg appearance-none  
						w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white 
						" type="text" x-model="event_date" readonly>
					</div>
					
				</div>
			</div>
		</div>
		<!-- /Modal -->
</div>

	<script>
	window.addEventListener('load', (event) => {
    console.log('The page has fully loaded');
	let elements = document.getElementsByClassName('dates');
	console.log(elements)
	
});

		
	var slotsData=[]
	var entryIds=[]
	const entryElements =document.querySelectorAll('[data-entry-info]');
	// Map over each element and extract the data value
	entryIds =Array.from(entryElements).map(
				item => JSON.parse(item.dataset.entryInfo)
			);
		

				

		var today = new Date();
		var dr = document.getElementById("form_start_date_day");
		var de = document.getElementById("form_end_date_day");

		var mr = document.getElementById("form_start_date_month");
		var me = document.getElementById("form_end_date_month");

		dr.value=today.getDate().toString()
		de.value=today.getDate().toString()
		mr.value=(today.getMonth()+1).toString()
		me.value=(today.getMonth()+1).toString()

		 var op = document.getElementById("form_start_date_day").getElementsByTagName("option");
		 var oe = document.getElementById("form_end_date_day").getElementsByTagName("option");
		for (var i = 0; i < op.length && i < today.getDate()-1; i++) {
				 op[i].disabled = true 
				 oe[i].disabled = true 
		}
		var om = document.getElementById("form_start_date_month").getElementsByTagName("option");
		 var ome = document.getElementById("form_end_date_month").getElementsByTagName("option");
		for (var i = 0; i < op.length && i < today.getMonth(); i++) {
			
				 om[i].disabled = true 
				 ome[i].disabled = true 
		}
		
				mr.addEventListener("change", function(e) {
					if(om[today.getMonth()].selected)
						for (var i = 0; i < op.length && i < today.getDate()-1; i++) 
								op[i].disabled = true 	
				for(var i=today.getMonth()+1; i < 12; i++)
					if(om[i].selected)
						for (var i = 0; i < op.length && i < today.getDate()-1; i++) 
									op[i].disabled = false
				
				});
				me.addEventListener("change", function(e) {
						if(ome[today.getMonth()].selected)
						for (var i = 0; i < oe.length && i < today.getDate()-1; i++) 
								oe[i].disabled = true 	
				for(var i=today.getMonth()+1; i < 12; i++)
					if(ome[i].selected)
						for (var i = 0; i < oe.length && i < today.getDate()-1; i++) 
									oe[i].disabled = false
				});
		var oy = document.getElementById("form_start_date_year").getElementsByTagName("option");
		 var oye = document.getElementById("form_end_date_year").getElementsByTagName("option");
		let inc=0
		for (var i = oy[0].value; i <  today.getFullYear(); i++) {
				 	
				 oy[inc].disabled = true 

				 oye[inc].disabled = true 
				 inc+=1
		}
		var yr = document.getElementById("form_start_date_year");
		yr.value='2021';
		//yr.setAttribute("read-only", "true");
		var ye = document.getElementById("form_end_date_year");
		//ye.setAttribute("read-only", "true");
		ye.value='2021';
		
		var starttime = document.getElementById("form_start_time");
		starttime.classList.add("text-center","mx-10","mb-3","px-4", "lg:w-1/2", "xl:w-1/3", "w-auto",  "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		var endtime = document.getElementById("form_end_time");
		endtime.classList.add("text-center","mx-10","px-4","lg:w-1/2", "xl:w-1/3", "w-auto", "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		{# var savebutton= #}
		document.getElementById("form_save").classList.add("bg-blue-500","hover:bg-blue-700","text-white","font-bold","py-1","px-4","rounded","mt-2");
		
		
		var labels=document.getElementsByTagName("label");
		var length = labels.length;
		for (var i = 0; i < 4; i++) {
			labels[i].classList.add("block","text-lg","font-bold","mb-2");
		}
		labels[0].classList.add("text-purple-600");
		labels[1].classList.add("text-purple-600");
		labels[2].classList.add("text-blue-600");
		labels[3].classList.add("text-blue-600");
		const MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
		const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

		function app() {
			return {
				month: '',
				year: '',
				slots: [],
				no_of_days: [],
				blankdays: [],
				no_of_booked_slots: 0,
				no_of_unbooked_slots: 0,
				event_day:0,
				days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

				events: [
					{
						event_date: new Date(2021, 3, 1),
						event_title: "April Fool's Day",
						event_theme: 'blue'
					},

					{
						event_date: new Date(2021, 3, 10),
						event_title: "Birthday",
						event_theme: 'red'
					},

					{
						event_date: new Date(2021, 3, 16),
						event_title: "Upcoming Event",
						event_theme: 'green'
					}
				],
				event_title: '',
				event_date: '',
				event_theme: 'blue',

				themes: [
					{
						value: "blue",
						label: "Blue Theme"
					},
					{
						value: "red",
						label: "Red Theme"
					},
					{
						value: "yellow",
						label: "Yellow Theme"
					},
					{
						value: "green",
						label: "Green Theme"
					},
					{
						value: "purple",
						label: "Purple Theme"
					}
				],

				openEventModal: false,

				initDate() {
					let today = new Date();
					this.month = today.getMonth();
					this.year = today.getFullYear();
					this.datepickerValue = new Date(this.year, this.month, today.getDate()).toDateString();
					console.table(entryIds)
					
				},
				async deleteSlot(id){
					console.log(id)
					let response
					try{
					response=await fetch('/delete/'+ id,{
						method: 'DELETE'

					 })
					  var server=await response.json()
						if(server.status === 200){
					 		console.log(server.message)	
							this.refreshTableBody()
							this.newSlotData()
							setTimeout(() => {
								
								 this.showSlots() }, 200);
							
						}
						if(server.status === 400){
							alert(server.message)
							return false

						}
						if(server.status === 300){
							alert(server.message)
							return false

						}
					
					}	catch(error){
						alert('something went wrong')
						console.log(error)
						return false
					}
					
									 
				},
				async newSlotData(){
					
							let response=await fetch('/slots/'+this.year.toString()+'-'+(this.month+1).toString()
							+'-'+this.event_day.toString(),{
											method: 'GET'

							})
					slots=await response.json()
					
					console.table(slots)			
	            },
				
				getSlots(day){
				
					var slotsBooked=0
					var slotsUnBooked=0
					entryIds.forEach((element) => { 
						if(parseInt(element.dateDay) === day  && parseInt(element.dateMonth) === (this.month+1) && parseInt(element.booked))
							slotsBooked+=1
						else if(parseInt(element.dateDay) === day  && parseInt(element.dateMonth) === (this.month+1) && !parseInt(element.booked))
							slotsUnBooked+=1
							
					 } )
					this.no_of_booked_slots=slotsBooked
					this.no_of_unbooked_slots=slotsUnBooked 
					return slotsBooked
				},
				

				isToday(date) {
					const today = new Date();
					const d = new Date(this.year, this.month, date);

					return today.toDateString() === d.toDateString() ? true : false;
				},

				showEventModal(date) {
					// open the modal
					this.openEventModal = true;
					this.event_date = new Date(this.year, this.month, date).toDateString();
					this.event_day=date;
					this.newSlotData()
					this.refreshTableBody()
					setTimeout(() => {
								
					 this.showSlots() }, 500);
					
					
				},

				addEvent() {
					if (this.event_title == '') {
						return;
					}

					this.events.push({
						event_date: this.event_date,
						event_title: this.event_title,
						event_theme: this.event_theme
					});

					console.log(this.events);

					// clear the form data
					this.event_title = '';
					this.event_date = '';
					this.event_theme = 'blue';

					//close the modal
					this.openEventModal = false;
				},

				getNoOfDays() {
					
					let daysInMonth = new Date(this.year, this.month + 1, 0).getDate();

					// find where to start calendar day of week
					let dayOfWeek = new Date(this.year, this.month).getDay();
					let blankdaysArray = [];
					for ( var i=1; i <= dayOfWeek; i++) {
						blankdaysArray.push(i);
					}
					this.no_of_days=[]
					let daysArray = {};
					for ( var i=1; i <= daysInMonth; i++) {
						daysArray = {};
						daysArray['day']=i;
						
						this.no_of_days.push(daysArray);
						this.getSlots(i)
						daysArray['booked']=this.no_of_booked_slots
						daysArray['unbooked']=this.no_of_unbooked_slots
					}
					console.table(this.no_of_days)
					this.blankdays = blankdaysArray;
					
				},
				 refreshTableBody() {
					var Table = document.getElementById("slots");
					Table.innerHTML = "";
					
					
				},
				//async method to display slots without requiring page refresh
				showSlots(){
					console.log('in')
						const element = document.getElementById("slots");
						
						slots.forEach((slot, index) => { 
							
								console.log(element)
								var row = element.insertRow(0);
									var cell1 = row.insertCell(0);
										cell1.className="px-6 py-4"
										var newDiv = document.createElement("div");
										newDiv.className="flex items-center"
										cell1.appendChild(newDiv)
											var innerDiv = document.createElement("div");
											innerDiv.className="ml-4"
											newDiv.appendChild(innerDiv)
												var innerInnerDiv = document.createElement("div");
												innerInnerDiv.className=" font-xs text-gray-900"
												innerInnerDiv.innerHTML=slot.slottime
												innerDiv.appendChild(innerInnerDiv)

									var cell2 = row.insertCell(1);
										cell2.className="px-6 py-4"
											var del = document.createElement("button");
											del.className="bg-gray-800 hover:bg-red-600 text-white font-semibold py-2 px-4 border border-gray-700 rounded-lg shadow-sm"
											del.addEventListener("click", () => {
													this.deleteSlot(slot.id)
														
											});
											del.innerHTML="Delete"
											cell2.appendChild(del)

									var cell3 = row.insertCell(2);
										cell3.className="px-6 py-4"
											if(parseInt(slot.booked)){
												var booked = document.createElement("SPAN");
												booked.className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800"
												booked.innerHTML="booked"
												cell3.appendChild(booked)
											}
											else{
												var unbooked = document.createElement("SPAN");
												unbooked.className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"
												unbooked.innerHTML="unbooked"
												cell3.appendChild(unbooked)

											}
										var cell4 = row.insertCell(3);
											cell4.className="px-6 py-4"
											var user = document.createElement("SPAN");
												user.className="font-xs text-gray-900"
													user.innerHTML=slot.user
												cell4.appendChild(user)
											
										var cell5= row.insertCell(4);
											cell5.className="px-6 py-4"
											var user = document.createElement("SPAN");
												user.className="font-xs text-gray-900"
													user.innerHTML=slot.category
												cell5.appendChild(user)
														

							

						} )

				}
			}
		}

		
	</script>
  </div>

</div>
{% endblock %}
