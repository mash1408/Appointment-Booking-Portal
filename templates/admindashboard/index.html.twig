{% extends 'base.html.twig' %}

{% block title %}Admin Dashboard{% endblock %}

{% block body %}
<div>
	<link rel="dns-prefetch" href="//unpkg.com" />
	<link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
	<link rel="stylesheet" href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css">
	<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js" defer></script>

	<style>
		[x-cloak] {
			display: none;
		}
	</style>
	<nav class="flex items-center justify-between flex-wrap bg-gray-900 p-6">
	
<p class="text-gray-600  font-medium rounded-md text-2xl  font-semibold font family:allura ">Sim's Spa</p>

	<div x-data="{ showModal1: false}" :class="{'overflow-y-hidden': showModal1}">
    	<main class="flex flex-col sm:flex-row justify-end items-end">
		<button class="justify-items-end bg-transparent  text-blue-700 font-semibold hover:text-white " @click="showModal1 = true">
			Generate Slots
      </button>
	  </main>
	  
	    <!-- Modal1 -->
    <div
      class="fixed inset-0 w-full h-full z-20 bg-black bg-opacity-50 duration-300 overflow-y-auto "
      x-show="showModal1"
      x-transition:enter="transition duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition duration-300"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
    >
      <div class="relative sm:w-3/4 md:w-1/2 lg:w-1/3 mx-2 sm:mx-auto my-10 opacity-100">
        <div
          class="relative bg-white shadow-lg rounded-md text-gray-900 z-20"
          @click.away="showModal1 = false"
          x-show="showModal1"
          x-transition:enter="transition transform duration-300"
          x-transition:enter-start="scale-0"
          x-transition:enter-end="scale-100"
          x-transition:leave="transition transform duration-300"
          x-transition:leave-start="scale-100"
          x-transition:leave-end="scale-0"
        >
          <header class="flex justify-center bg-gray-900">
            <h2 class="font-sans font-semibold text-3xl text-white">Slot Generation</h2>
            <button class="focus:outline-none p-2 " @click="showModal1 = false">
              <svg class="fill-current flex justify-end" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
                <path
                  d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"
                ></path>
              </svg>
            </button>
          </header>
          <main class="p-2 text-center">
			<div class="container mx-auto px-4 py-2 text-center">
					{{ form_start(adminslot, {'attr': {'novalidate': 'novalidate'}}) }}
						<div class="container border-l-3 border-blue-600">
								{{form_label(adminslot.start_date, 'Start Date')}}
								{# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
								{{ form_widget(adminslot.start_date, {'attr': {'class': 'mb-3   border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}
							
								{{form_label(adminslot.end_date, 'End Date')}}
								{# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
								{{ form_widget(adminslot.end_date, {'attr': {'class': 'mb-3   border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}

								{# {{ form_widget(adminslot.save) }} #}

						</div>
					{{ form_end(adminslot) }}
					</div>
          </main>
          {# <footer class="flex justify-center p-2">
            {# <button
              class="bg-red-600 font-semibold text-white p-2 w-32 rounded-full hover:bg-red-700 focus:outline-none focus:ring shadow-lg hover:shadow-none transition-all duration-300"
              @click="showModal1 = false"
            >
              Cancel
            </button> #}
          {# </footer> #}
        </div>
      </div>
    </div>
	</div>
	</nav>
<div id="test" class="test">
</div>


{# pass slot data to javascript inorder to be able to access them  #}
{% for slot in slots %}
{% set entryInfo={
	id: slot.id,
	booked: slot.booked,
	dateDay: slot.slotdate|date('d'),
	dateMonth: slot.slotdate|date('m')
}%}
    <a  data-entry-info="{{ entryInfo|json_encode }}"></a>
{% endfor %}

<div class="antialiased sans-serif bg-gray-400 h-screen ml-66 px-12 ">
	<div x-data="app()" x-init="[initDate(), getNoOfDays()]" x-cloak>
		<div class="container mx-auto px-4 py-2 md:py-24  bg-gradient-to-r from-gray-400 via-gray-500 to-gray-400 ... ">
			  
			<div class="bg-gradient-to-r from-gray-400 via-gray-500 to-gray-400 ... font-bold text-gray-900 text-xl mb-4 flex justify-center rounded-t-lg ">
                SLOTS
			</div>

			<div class="bg-white rounded-lg overflow-hidden shadow-2xl">

				<div class="flex items-center justify-between py-2 px-6">
						{# <div class="border rounded-lg px-1" style="padding-top: 2px;"> #}
					{# <div class="border-r inline-flex h-6"></div>		 #}
				<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 items-center" 
							:class="{'cursor-not-allowed opacity-25': month == 0 }"
							:disabled="month == 0 ? true : false"
							@click="month--; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>  
						</button>
					<div>
						<span x-text="MONTH_NAMES[month]" class=" font-mono text-semibold text-lg font-bold text-gray-800 "></span>
						<span x-text="year" class="font-mono ml-1 text-lg text-gray-600 font-normal "></span>
					</div>
			
						
					
						<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex items-center cursor-pointer hover:bg-gray-200 p-1" 
							:class="{'cursor-not-allowed opacity-25': month == 11 }"
							:disabled="month == 11 ? true : false"
							@click="month++; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
							</svg>									  
						</button>
					{# </div> #}
				</div>

				<div class="-mx-1 -mb-1">
					<div class="flex flex-wrap" style="margin-bottom: -40px;">
						<template x-for="(day, index) in DAYS" :key="index">	
							<div style="width: 14.26%" class="px-2 py-2">
								<div
									x-text="day" 
									class="text-gray-600 text-sm uppercase tracking-wide font-bold text-center"></div>
							</div>
						</template>
					</div>

					<div class="flex flex-wrap border-t border-l">
						<template x-for="blankday in blankdays">
							<div 
								style="width: 14.28%; height: 120px"
								class="text-center border-r border-b px-4 pt-2 "	
							></div>
						</template>	
						<template x-for="(date, dateIndex) in no_of_days" :key="dateIndex">	
						
							<div style="width: 14.28%; height: 120px" class=" px-4 pt-2 border-r border-b relative transition ease-in-out duration-100 delay-100"
								:class="{'bg-red-200 border-gray-500' : date.unbooked === 0 && date.booked !== 0, 'bg-green-200 border-gray-500' : date.unbooked!== 0}">

								<div
									@click="showEventModal(date.day)"
									x-text="date.day"
									
									class=" inline-flex w-6 h-6 items-center justify-center cursor-pointer text-center leading-none rounded-full transition ease-in-out duration-100"
									:class="{'bg-blue-400 text-white': isToday(date.day) == true, 'hover:bg-blue-200': isToday(date) == false }"	
								></div>

								<div style="height: 80px;" class="overflow-y-auto mt-1 " 
								x-show="!(date.booked === 0 && date.unbooked === 0)"
								 x-transition:enter="transition ease-in-out duration-300"
									
								x-transition:enter-start="opacity-0 transform scale-60"
								x-transition:enter-end="opacity-100 transform scale-100"
								x-transition:leave="transition ease-in duration-300"
								x-transition:leave-start="opacity-100 transform scale-100"
								x-transition:leave-end="opacity-0 transform scale-90"
								>
						
									<div 
										class="cursor-pointer absolute top-0 right-10 mt-2 mr-2 inline-flex 
										items-center justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										 x-text="date.booked"
										 
										style="border: 2px solid red;"
										
										></div>
						
										<div 
										style="border: 2px solid  #73AD21;"
										x-text="date.unbooked"
									
										class=" cursor-pointer absolute top-0 right-0 mt-2 mr-2 inline-flex items-center 
										justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										>
										</div>

								</div>

								<div style="height: 80px;" class="overflow-y-auto mt-1 cursor-pointer" 
								x-show="(date.booked === 0 && date.unbooked === 0)"
								 x-transition:enter="transition ease-in-out duration-300"
									
								x-transition:enter-start="opacity-0 transform scale-60"
								x-transition:enter-end="opacity-100 transform scale-100"
								x-transition:leave="transition ease-in duration-300"
								x-transition:leave-start="opacity-100 transform scale-100"
								x-transition:leave-end="opacity-0 transform scale-90"
								>
								<div 
										style="border: 2px solid  lightsteelblue;"
										
										x-transition
										class="absolute top-0 right-0 mt-2 mr-2 inline-flex items-center 
										justify-center rounded-full text-sm w-6 h-6  
										 leading-none"
										>
										E
										</div>

								</div>

								<div style="height: 80px;" class="overflow-y-auto mt-1 " id="test1">
									<div 
										class="absolute top-0 right-0 mt-2 mr-2 inline-flex items-center justify-center rounded-full text-sm w-6 h-6 bg-gray-700 text-white leading-none"
										x-show="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length"
										x-text="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length">
									</div>

								</div>

							</div>
						</template>
					</div>
				</div>
			</div>
		</div>
		

		<!-- Modal -->
		<div style=" background-color: rgba(0, 0, 0, 0.8)" class="fixed z-40 top-0 right-0 left-0 bottom-0 h-full w-full" x-show.transition.opacity="openEventModal">
			<div class="p-4 max-w-xl mx-auto relative absolute left-0 right-0 overflow-hidden mt-24">
				<div class="shadow absolute right-0 top-0 w-10 h-10 rounded-full bg-white text-gray-500 hover:text-gray-800 inline-flex items-center justify-center cursor-pointer"
					x-on:click="openEventModal = !openEventModal">
					<svg class="fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path 
						d="M16.192 6.344L11.949 10.586 7.707 6.344 6.293 7.758 10.535 12 6.293 16.242 7.707 17.656 11.949 13.414 16.192 17.656 17.606 16.242 13.364 12 17.606 7.758z" />
					</svg>
				</div>

				<div class="shadow w-full rounded-lg bg-white overflow-hidden w-full block p-8">
					
					<h2 class="font-bold text-2xl mb-6 text-gray-800 border-b pb-2">Slot Details</h2>
				 
					<div class="mb-4">

						{% for slot in slots %}
						<template x-if="{{slot.slotdate| date('d')}} == event_day && (month+1) == {{slot.slotdate| date('m')}}">
						<div>
							<div class="mt-4 justify-around border-2 border-gray-200 rounded-lg  text-gray-700 bg-gray-200">
							
							{{slot.slottime|date('H:i:s')}}
							<button type="button" class="bg-gray-800 hover:bg-gray-700 
							text-white font-semibold py-2 px-4 border border-gray-700 
							
							rounded-lg shadow-sm" @click="deleteSlot({{ slot.id }})">
							Delete
							</button>
							{% if slot.booked is same as("0") %}
								<p>Not Booked</p>
							{% endif %}
							{% if slot.booked is same as("1") %}
								<p>Booked</p>
							{% endif %}
							</div>
						</div>

						</template>
								
						{% endfor %}
					</div>
					
					<div class="mb-4">
						<label class="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Date</label>
						<input class="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" type="text" x-model="event_date" readonly>
					</div>

					
 
					
				</div>
			</div>
		</div>
		<!-- /Modal -->
</div>

	<script>
	window.addEventListener('load', (event) => {
    console.log('The page has fully loaded');
	let elements = document.getElementsByClassName('dates');
	console.log(elements)
	
});
		

	var entryIds=[]
	const entryElements =document.querySelectorAll('[data-entry-info]');
	// Map over each element and extract the data value
	entryIds =Array.from(entryElements).map(
				item => JSON.parse(item.dataset.entryInfo)
			);
		

				async function deleteSlot(id){
					let response
					try{
					response=await fetch('/delete/'+ id,{
						method: 'DELETE'

					 })
					  var server=await response.json()
						if(server.status === 200){
					 		console.log(server.message)	
						
						}
						if(server.status === 400){
							alert(server.message)
							return

						}
						if(server.status === 300){
							alert(server.message)
							return

						}
					
					}	catch(error){
						alert('something went wrong')
						console.log(error)
					}
					
									 
				}



		var yr = document.getElementById("form_start_date_year");
		yr.value='2021';
		//yr.setAttribute("read-only", "true");
		var ye = document.getElementById("form_end_date_year");
		//ye.setAttribute("read-only", "true");
		ye.value='2021';
		var starttime = document.getElementById("form_start_time");
		starttime.classList.add("text-center","mx-10","mb-3","px-4", "lg:w-1/2", "xl:w-1/3", "w-auto",  "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		var endtime = document.getElementById("form_end_time");
		endtime.classList.add("text-center","mx-10","px-4","lg:w-1/2", "xl:w-1/3", "w-auto", "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		{# var savebutton= #}
		document.getElementById("form_save").classList.add("bg-blue-500","hover:bg-blue-700","text-white","font-bold","py-1","px-4","rounded","mt-2");
		var labels=document.getElementsByTagName("label");
		var length = labels.length;
		for (var i = 0; i < 4; i++) {
			labels[i].classList.add("block","text-lg","font-bold","mb-2");
		}
		labels[0].classList.add("text-purple-600");
		labels[1].classList.add("text-purple-600");
		labels[2].classList.add("text-blue-600");
		labels[3].classList.add("text-blue-600");
		const MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
		const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

		function app() {
			return {
				month: '',
				year: '',
				slots: 0,
				no_of_days: [],
				blankdays: [],
				no_of_booked_slots: 0,
				no_of_unbooked_slots: 0,
				event_day:0,
				days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

				events: [
					{
						event_date: new Date(2021, 3, 1),
						event_title: "April Fool's Day",
						event_theme: 'blue'
					},

					{
						event_date: new Date(2021, 3, 10),
						event_title: "Birthday",
						event_theme: 'red'
					},

					{
						event_date: new Date(2021, 3, 16),
						event_title: "Upcoming Event",
						event_theme: 'green'
					}
				],
				event_title: '',
				event_date: '',
				event_theme: 'blue',

				themes: [
					{
						value: "blue",
						label: "Blue Theme"
					},
					{
						value: "red",
						label: "Red Theme"
					},
					{
						value: "yellow",
						label: "Yellow Theme"
					},
					{
						value: "green",
						label: "Green Theme"
					},
					{
						value: "purple",
						label: "Purple Theme"
					}
				],

				openEventModal: false,

				initDate() {
					let today = new Date();
					this.month = today.getMonth();
					this.year = today.getFullYear();
					this.datepickerValue = new Date(this.year, this.month, today.getDate()).toDateString();
					console.log(entryIds)
					
				},
				
				getSlots(day){
				
					var slotsBooked=0
					var slotsUnBooked=0
					entryIds.forEach((element) => { 
						if(parseInt(element.dateDay) === day  && parseInt(element.dateMonth) === (this.month+1) && parseInt(element.booked))
							slotsBooked+=1
						else if(parseInt(element.dateDay) === day  && parseInt(element.dateMonth) === (this.month+1) && !parseInt(element.booked))
							slotsUnBooked+=1
							
					 } )
					this.no_of_booked_slots=slotsBooked
					this.no_of_unbooked_slots=slotsUnBooked 
					return slotsBooked
				},
				

				isToday(date) {
					const today = new Date();
					const d = new Date(this.year, this.month, date);

					return today.toDateString() === d.toDateString() ? true : false;
				},

				showEventModal(date) {
					// open the modal
					this.openEventModal = true;
					this.event_date = new Date(this.year, this.month, date).toDateString();
					this.event_day=date;
					this.showSlots()
				},

				addEvent() {
					if (this.event_title == '') {
						return;
					}

					this.events.push({
						event_date: this.event_date,
						event_title: this.event_title,
						event_theme: this.event_theme
					});

					console.log(this.events);

					// clear the form data
					this.event_title = '';
					this.event_date = '';
					this.event_theme = 'blue';

					//close the modal
					this.openEventModal = false;
				},

				getNoOfDays() {
					
					let daysInMonth = new Date(this.year, this.month + 1, 0).getDate();

					// find where to start calendar day of week
					let dayOfWeek = new Date(this.year, this.month).getDay();
					let blankdaysArray = [];
					for ( var i=1; i <= dayOfWeek; i++) {
						blankdaysArray.push(i);
					}
					this.no_of_days=[]
					let daysArray = {};
					for ( var i=1; i <= daysInMonth; i++) {
						daysArray = {};
						daysArray['day']=i;
						
						this.no_of_days.push(daysArray);
						this.getSlots(i)
						daysArray['booked']=this.no_of_booked_slots
						daysArray['unbooked']=this.no_of_unbooked_slots
					}
					console.log(JSON.stringify(this.no_of_days))
					this.blankdays = blankdaysArray;
					
				},
				 removeAllChildNodes(parent) {
					 console.log('del')
					while (parent.firstChild) {
						parent.removeChild(parent.firstChild);
					}
				},
				//async method to display slots without requiring page refresh
				showSlots(){
					
						const element = document.getElementById("test");
						
						{% for slot in slots %}
						
							if({{slot.slotdate| date('d')}} == this.event_day && (this.month+1) == {{slot.slotdate| date('m')}}){
									
							var newDiv = document.createElement("div");
								element.appendChild(newDiv)
								var innerDiv = document.createElement("div");
									newDiv.appendChild(innerDiv)
										innerDiv.className="mt-4 justify-around border-2 border-gray-200 rounded-lg  text-gray-700 bg-gray-200"
										var text = document.createTextNode("{{slot.slottime|date('H:i:s')}}");
										var del = document.createElement("button");
										del.className="bg-gray-800 hover:bg-gray-700 text-white font-semibold py-2 px-4 border border-gray-700 rounded-lg shadow-sm"
										del.value="delete"
										//event listener for delete buttons
										del.addEventListener("click", () => {
											console.log("clicked element");
										});
										innerDiv.appendChild(text)
										innerDiv.appendChild(del)

							}
						{% endfor %}

				}
			}
		}

		
	</script>
  </div>

</div>
{% endblock %}
