{% extends 'base.html.twig' %}

{% block title %}Admin Dashboard{% endblock %}

{% block body %}

	<link rel="dns-prefetch" href="//unpkg.com" />
	<link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
	<link rel="stylesheet" href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css">
	<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js" defer></script>

	<style>
		[x-cloak] {
			display: none;
		}
	</style>

	<div class="container mx-auto px-4 py-2 text-center w-1/2">
<h2 class="title-font sm:text-4xl text-2xl mb-4 font-medium text-blue-900">Slots Generation Form</h2>
{{ form_start(adminslot, {'attr': {'novalidate': 'novalidate'}}) }}
<div class="container border-l-3 border-blue-600">
   {{form_label(adminslot.start_date, 'Start Date')}}
        {# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
        {{ form_widget(adminslot.start_date, {'attr': {'class': 'mb-3  sm:mx-auto md:mx-44 lg:mx-52 pl-5 lg:w-1/2 xl:w-1/3 w-auto  border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}
    
		{{form_label(adminslot.end_date, 'End Date')}}
        {# {{ form_row(registrationForm.email,{'attr': {'class': 'mr-8'}}) }} #}
        {{ form_widget(adminslot.end_date, {'attr': {'class': 'pl-5 mb-3  sm:mx-auto md:mx-44 lg:mx-52 lg:w-1/2 xl:w-1/3 w-auto  border-b-2 rounded-lg border-purple-500 font-display focus:outline-none focus:border-primarycolor transition-all duration-500 text-lg'}}) }}
</div>
{{ form_end(adminslot) }}
</div>  




{# pass slot data to javascript inorder to be able to access them  #}
{% for slot in slots %}
    <a  data-entry-id="{{ slot.booked }}"></a>
{% endfor %}

<div class="antialiased sans-serif bg-gray-100 h-screen">
	<div x-data="app()" x-init="[initDate(), getNoOfDays()]" x-cloak>
		<div class="container mx-auto px-4 py-2 md:py-24">
			  
			<div class="font-bold text-gray-800 text-xl mb-4">
                Slots
			</div>

			<div class="bg-white rounded-lg shadow overflow-hidden">

				<div class="flex items-center justify-between py-2 px-6">
					<div>
						<span x-text="MONTH_NAMES[month]" class="text-lg font-bold text-gray-800"></span>
						<span x-text="year" class="ml-1 text-lg text-gray-600 font-normal"></span>
					</div>
					<div class="border rounded-lg px-1" style="padding-top: 2px;">
						<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 items-center" 
							:class="{'cursor-not-allowed opacity-25': month == 0 }"
							:disabled="month == 0 ? true : false"
							@click="month--; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>  
						</button>
						<div class="border-r inline-flex h-6"></div>		
						<button 
							type="button"
							class="leading-none rounded-lg transition ease-in-out duration-100 inline-flex items-center cursor-pointer hover:bg-gray-200 p-1" 
							:class="{'cursor-not-allowed opacity-25': month == 11 }"
							:disabled="month == 11 ? true : false"
							@click="month++; getNoOfDays()">
							<svg class="h-6 w-6 text-gray-500 inline-flex leading-none"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
							</svg>									  
						</button>
					</div>
				</div>

				<div class="-mx-1 -mb-1">
					<div class="flex flex-wrap" style="margin-bottom: -40px;">
						<template x-for="(day, index) in DAYS" :key="index">	
							<div style="width: 14.26%" class="px-2 py-2">
								<div
									x-text="day" 
									class="text-gray-600 text-sm uppercase tracking-wide font-bold text-center"></div>
							</div>
						</template>
					</div>

					<div class="flex flex-wrap border-t border-l">
						<template x-for="blankday in blankdays">
							<div 
								style="width: 14.28%; height: 120px"
								class="text-center border-r border-b px-4 pt-2"	
							></div>
						</template>	
						<template x-for="(date, dateIndex) in no_of_days" :key="dateIndex">	
							<div style="width: 14.28%; height: 120px" class="px-4 pt-2 border-r border-b relative">
								<div  class="relative z-30 inline-flex">
								<div
									@click="showEventModal(date.day)"
									x-text="date.day"
									
									class="inline-flex w-6 h-6 items-center justify-center cursor-pointer text-center leading-none rounded-full transition ease-in-out duration-100"
									:class="{'bg-blue-500 text-white': isToday(date.day) == true, 'text-gray-700 hover:bg-blue-200': isToday(date) == false }"	
								></div>
				   				<span x-on:mouseover="date.openEventPopup = true" 
									x-on:mouseleave="date.openEventPopup = false" style="height: 25px;width: 50px; background-color: yellow;border-radius: 25%;display: inline-block;">slots</span>
								<div class="relative" x-cloak x-show.transition.origin.top="date.openEventPopup">
									<div  style="background-color:#e2e8f0; z-index:1000;" class="absolute top-0 z-10 w-32 p-2 -mt-1 text-sm leading-tight text-white transform -translate-x-1/2 -translate-y-full  rounded-lg shadow-lg">
									{% for slot in slots %}
									
									<template x-if="{{slot.booked}} ">
											<div><span style="height: 25px;width: 25px; background-color: green;border-radius: 50%;display: inline-block;"></span></div>
										</template>

										<template x-if="{{slot.booked}} === 0">
											<div><span style="height: 25px;width: 25px; background-color: red;border-radius: 50%;display: inline-block;"></span></div>
										</template>
									{% endfor %}
										
									</div>

									<svg   class="absolute z-10 w-12 h-6 text-gray-300 transform -translate-x-12 -translate-y-3 fill-current stroke-current" width="8" height="8">
										<rect x="12" y="-10" width="8" height="8" transform="rotate(45)" />
									</svg>
								</div>








								<div style="height: 80px;" class="overflow-y-auto mt-1">
									<div 
										class="absolute top-0 right-0 mt-2 mr-2 inline-flex items-center justify-center rounded-full text-sm w-6 h-6 bg-gray-700 text-white leading-none"
										x-show="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length"
										x-text="events.filter(e => e.event_date === new Date(year, month, date).toDateString()).length"></div>

									<template x-for="event in events.filter(e => new Date(e.event_date).toDateString() ===  new Date(year, month, date).toDateString() )">	
										<div
											class="px-2 py-1 rounded-lg mt-1 overflow-hidden border"
											:class="{
												'border-blue-200 text-blue-800 bg-blue-100': event.event_theme === 'blue',
												'border-red-200 text-red-800 bg-red-100': event.event_theme === 'red',
												'border-yellow-200 text-yellow-800 bg-yellow-100': event.event_theme === 'yellow',
												'border-green-200 text-green-800 bg-green-100': event.event_theme === 'green',
												'border-purple-200 text-purple-800 bg-purple-100': event.event_theme === 'purple'
											}"
										>
											<p x-text="event.event_title" class="text-sm truncate leading-tight"></p>
										</div>
									</template>
								</div>
							</div>
						</template>
					</div>
				</div>
			</div>
		</div>
		

		<!-- Modal -->
		<div style=" background-color: rgba(0, 0, 0, 0.8)" class="fixed z-40 top-0 right-0 left-0 bottom-0 h-full w-full" x-show.transition.opacity="openEventModal">
			<div class="p-4 max-w-xl mx-auto relative absolute left-0 right-0 overflow-hidden mt-24">
				<div class="shadow absolute right-0 top-0 w-10 h-10 rounded-full bg-white text-gray-500 hover:text-gray-800 inline-flex items-center justify-center cursor-pointer"
					x-on:click="openEventModal = !openEventModal">
					<svg class="fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
						<path 
						d="M16.192 6.344L11.949 10.586 7.707 6.344 6.293 7.758 10.535 12 6.293 16.242 7.707 17.656 11.949 13.414 16.192 17.656 17.606 16.242 13.364 12 17.606 7.758z" />
					</svg>
				</div>

				<div class="shadow w-full rounded-lg bg-white overflow-hidden w-full block p-8">
					
					<h2 class="font-bold text-2xl mb-6 text-gray-800 border-b pb-2">Slot Details</h2>
				 
					<div class="mb-4">

						{% for slot in slots %}
						<template x-if="{{slot.slotdate| date('d')}} == event_day && (month+1) == {{slot.slotdate| date('m')}}">
							<div>{{slot.slottime|date('H:i:s')}}</div>

						</template>
								
						{% endfor %}



						<input class="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" type="text" x-model="event_title">
					</div>

					<div class="mb-4">
						<label class="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Event date</label>
						<input class="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" type="text" x-model="event_date" readonly>
					</div>

					
 
					<div class="mt-8 text-right">
						<button type="button" class="bg-white hover:bg-gray-100 text-gray-700 font-semibold py-2 px-4 border border-gray-300 rounded-lg shadow-sm mr-2" @click="openEventModal = !openEventModal">
							Cancel
						</button>	
						<button type="button" class="bg-gray-800 hover:bg-gray-700 text-white font-semibold py-2 px-4 border border-gray-700 rounded-lg shadow-sm" @click="addEvent()">
							Save Event
						</button>	
					</div>
				</div>
			</div>
		</div>
		<!-- /Modal -->
</div>

	<script>

		var yr = document.getElementById("form_start_date_year");
		yr.value='2021';
		//yr.setAttribute("read-only", "true");
		var ye = document.getElementById("form_end_date_year");
		//ye.setAttribute("read-only", "true");
		ye.value='2021';
		var starttime = document.getElementById("form_start_time");
		starttime.classList.add("text-center","mx-10","mb-3","px-4", "lg:w-1/2", "xl:w-1/3", "w-auto",  "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		var endtime = document.getElementById("form_end_time");
		endtime.classList.add("text-center","mx-10","px-4","lg:w-1/2", "xl:w-1/3", "w-auto", "border-b-2", "rounded-lg","border-blue-500", "font-display","focus:outline-none","focus:border-primarycolor","transition-all","duration-500","text-lg","sm:mx-auto", "md:mx-44", "lg:mx-52");
		{# var savebutton= #}
		document.getElementById("form_save").classList.add("bg-blue-500","hover:bg-blue-700","text-white","font-bold","py-1","px-4","rounded","mt-2");
		var labels=document.getElementsByTagName("label");
		var length = labels.length;
		for (var i = 0; i < 4; i++) {
			labels[i].classList.add("block","text-lg","font-bold","mb-2");
		}
		labels[0].classList.add("text-purple-600");
		labels[1].classList.add("text-purple-600");
		labels[2].classList.add("text-blue-600");
		labels[3].classList.add("text-blue-600");
		const MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
		const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

		function app() {
			return {
				month: '',
				year: '',
				no_of_days: [],
				blankdays: [],
				event_day:0,
				days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

				events: [
					{
						event_date: new Date(2021, 3, 1),
						event_title: "April Fool's Day",
						event_theme: 'blue'
					},

					{
						event_date: new Date(2021, 3, 10),
						event_title: "Birthday",
						event_theme: 'red'
					},

					{
						event_date: new Date(2021, 3, 16),
						event_title: "Upcoming Event",
						event_theme: 'green'
					}
				],
				event_title: '',
				event_date: '',
				event_theme: 'blue',

				themes: [
					{
						value: "blue",
						label: "Blue Theme"
					},
					{
						value: "red",
						label: "Red Theme"
					},
					{
						value: "yellow",
						label: "Yellow Theme"
					},
					{
						value: "green",
						label: "Green Theme"
					},
					{
						value: "purple",
						label: "Purple Theme"
					}
				],

				openEventModal: false,

				initDate() {
					let today = new Date();
					this.month = today.getMonth();
					this.year = today.getFullYear();
					this.datepickerValue = new Date(this.year, this.month, today.getDate()).toDateString();
						document.addEventListener('DOMContentLoaded', function() {
					console.log('loaded')
					 const entryElements =
						document.querySelectorAll('[data-entry-id]');

					// Map over each element and extract the data value
					const entryIds =
						Array.from(entryElements).map(
							item => item.dataset.entryId
						);
					this.isBooked=entryIds;
					// You'll now have an array containing string values
					console.log(this.isBooked);	
					
					})

				},

				isToday(date) {
					const today = new Date();
					const d = new Date(this.year, this.month, date);

					return today.toDateString() === d.toDateString() ? true : false;
				},

				showEventModal(date) {
					// open the modal
					this.openEventModal = true;
					this.event_date = new Date(this.year, this.month, date).toDateString();
					this.event_day=date;
				},

				addEvent() {
					if (this.event_title == '') {
						return;
					}

					this.events.push({
						event_date: this.event_date,
						event_title: this.event_title,
						event_theme: this.event_theme
					});

					console.log(this.events);

					// clear the form data
					this.event_title = '';
					this.event_date = '';
					this.event_theme = 'blue';

					//close the modal
					this.openEventModal = false;
				},

				getNoOfDays() {
					let daysInMonth = new Date(this.year, this.month + 1, 0).getDate();

					// find where to start calendar day of week
					let dayOfWeek = new Date(this.year, this.month).getDay();
					let blankdaysArray = [];
					for ( var i=1; i <= dayOfWeek; i++) {
						blankdaysArray.push(i);
					}

					let daysArray = {};
					for ( var i=1; i <= daysInMonth; i++) {
						daysArray = {};
						daysArray['day']=i;
						daysArray['openEventPopup']=false;
						this.no_of_days.push(daysArray);
					}
					console.log(JSON.stringify(this.no_of_days))
					this.blankdays = blankdaysArray;
					
				}
			}
		}

		
	</script>
  </div>


{% endblock %}
